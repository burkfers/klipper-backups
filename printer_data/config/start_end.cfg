[gcode_macro print_start]
gcode:
    {% set BED_TEMP = params.BED|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(240)|float %}

    filter_stats name=nevermore_monitor

    _status_heating
    # Start bed heating
    M140 S{BED_TEMP}
    # Preheat nozzle to 120
    M104 S120
    # Use absolute coordinates
    G90
    # Home the printer
    _status_homing
    _CG28

    _status_heating

    {% if BED_TEMP >= 90 %} ; If bed is hot, it's a smelly material
        UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION=0 ; stop stopping the filter
	SET_FAN_SPEED FAN=nevermore SPEED=0.6
    {% endif %}

    # park in the front
    G90
    G0 X5 Y5 Z5

    # Set and wait for nozzle to reach temperature
    _status_heating
    M109 S{EXTRUDER_TEMP}
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}

    # Prime the nozzle
    G90
    G1 X10 Y0.2 E5 F1000
    G1 X120 E20 F1000
	

    G90
    _status_printing

[gcode_macro print_end]
description: Inserted by slicer at end of print.
  Usage: PRINT_END
gcode:
    _KM_CHECK_IS_PRINTING
    M400

    G91
    G10

    M220 S100
    M221 S100

    _status_busy
    UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION=900

    TURN_OFF_HEATERS
    M107; turn off fan

  {% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}
  # Park the toolhead and present the bed
  {% if printer.toolhead.homed_axes|lower == "xyz" %}
    PARK
  {% endif %}
  M84 ; disable steppers
  CLEAR_PAUSE

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    #PRINT_END
    CLEAN_NOZZLE PURGE=0
    TURN_OFF_HEATERS
    BASE_CANCEL_PRINT

[gcode_macro _km_check_is_printing]
variable_debug_state: False # Disables print state check for debugging.
description: Throws an error if print is not currently in progress.
gcode:
  {% if not debug_state and
        printer.idle_timeout.state|string != "Printing" and
        not (printer.virtual_sdcard|default({})).is_active|default(False) and
        not printer.pause_resume.is_paused %}
    { action_raise_error("No active print.") }
  {% endif %}
