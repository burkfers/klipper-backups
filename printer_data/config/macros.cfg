[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro _CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}
    

[gcode_macro _ENSURE_EXTRUDER_TEMP]
gcode:
  {% set min_temp = params.MIN_TEMP|default(200)|int %}
  {% set target_temp = params.TARGET_TEMP|default(230)|int %}

  {% if printer.extruder.target > min_temp %}
    {% if printer.extruder.temperature < min_temp %}
      M109 S{printer.extruder.target}
    {% endif %}
  {% else %}
    M109 S{target_temp}
  {% endif %}


[gcode_macro LOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=load_state
  _status_busy
  
  _ENSURE_EXTRUDER_TEMP
  
  G91
  G92 E0
  G1 E10 F200                    ; slow roll 10mm
  G1 E45 F1500                   ; fast approach meltzone
  G1 E30 F200                    ; prime nozzle with filament
  _status_ready
  RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:

  _ENSURE_EXTRUDER_TEMP

  SAVE_GCODE_STATE NAME=unload_state
  _status_busy
  G91
  G92 E0
  # G1 E10 F300                    ; extrude a little to soften tip
  # G1 E-10 F3000                  ; jerk the filament out of the melt zone
  # G1 E-50 F1800                  ; retract the rest of the way
  # G1 E-10 F900                   ; retract the rest of the way

  G0 E10 F360                      ; dip the tip in                                          
  G0 E5 F2400                      ; dunk the tip                                          
  G0 E-5 F2400                     ; pull out quickly
  G0 E-10 F120                     ; let the tip cool a little
  G0 E-80 F3600                    ; send it on its way!              

  CLEAR_ACTIVE_SPOOL
  _status_ready
  RESTORE_GCODE_STATE NAME=unload_state

# [gcode_macro PAUSE]
# rename_existing: BASE_PAUSE
# gcode:
#     # Parameters
#     {% set leavehotendon = params.LEAVEHOTENDON|default(0)|int %}
#     {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

#     {% if printer['pause_resume'].is_paused|int == 0 %}
#         SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
#         SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
# 	_status_busy

# #       SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
#         SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
#         BASE_PAUSE                                                                           ; pause print
#         {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
#             G91                                                                              ; relative positioning
#             G1 Z{z} F900                                                                     ; raise Z up by z hop amount
#         {% else %}
#             { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
#             SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
#         {% endif %}
#         G90                                                                                  ; absolute positioning
#         G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
#         SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
# 	{% if leavehotendon|int <= 0 %}
#           M104 S0                                                                            ; turn off hotend unless specifically asked to leave it on
#         {% endif %}
#         SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
#     {% endif %}

# [gcode_macro RESUME]
# rename_existing: BASE_RESUME
# variable_zhop: 0
# variable_etemp: 0
# gcode:
#     # Parameters
#     {% set e = params.E|default(0)|int %}                                          ; hotend prime amount (in mm)

#     {% if printer['pause_resume'].is_paused|int == 1 %}
# #       SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
#         SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
#         {% if etemp > 0 %}
#             M109 S{etemp|int}                                                        ; wait for hotend to heat back up
#         {% endif %}
#         RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
#         G91                                                                          ; relative positioning
#         M83                                                                          ; relative extruder positioning
#         {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
#             G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
#         {% else %}
#             G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
#         {% endif %}
#         _status_printing
#         RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
#         BASE_RESUME                                                                  ; resume print
#     {% endif %}

[gcode_macro M600]
gcode:
  PAUSE LEAVEHOTENDON=1
#  {% set resume = printer['gcode_macro RESUME'] %}
#  M109 S{resume.etemp|int}
  UNLOAD_FILAMENT

# [gcode_macro PARK]
# gcode:
#     G90
#     G1 X135 Y300 F12000 ; go to poop bucket
# 
# [gcode_macro CLEAN_NOZZLE]
# description: Wipes nozzle and purges if hot
# gcode:
#     {% set prg = params.PURGE|default(0)|int %}
#     {% set prime = params.PRIME|default(0)|int %}
#     _CG28
# 
#     _status_cleaning
# 
#     {% if printer.toolhead.position.x != 285 or printer.toolhead.position.y != 298 %}
#       G91
#       G1 Z10 F1800       ; hop for safety
#     {% endif %}
#     G90
#     G1 X285 Y298 F12000 ; go to poop bucket
#     G1 Z0.5 F1800       ; position at brush height
#    
#     {% if prg > 0 %}
#       M83
#       G1 E50 F600   ; poop
#       {% if prime <= 0 %}
#         G1 E-10 F800 ; retract
#       {% endif %}
#     {% endif %}
# 
#     G91
#     G0 X-55 F8000       ; wipe l
#     G0  X55 F8000       ; wipe r
#     G0 X-55 F8000       ; wipe l
#     G0  X55 F8000       ; wipe r
#     G90
# 
#     G0 Z10

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 290
variable_start_y: 300
variable_start_z: 2
variable_range_x: -60
variable_range_y: 2

gcode:
    {% set prg = params.PURGE|default(0)|int %}
    {% set prime = params.PRIME|default(0)|int %}

	_CG28
	_status_cleaning

	{% if printer.toolhead.position.x != start_x or printer.toolhead.position.y != start_y %}
		G91
		G1 Z10 F1800 ; hop
	{% endif %}

	G90
	G0 X{start_x} Y{start_y} F12000
	G0 Z{start_z} F1800

    {% if prg > 0 %}
      M83
      G1 E50 F600   ; poop
      {% if prime <= 0 %}
        G1 E-10 F800 ; retract
      {% endif %}
    {% endif %}

	G91
	{% for r in range(4) %} ; repeat wiper
		{% for n in range(( (range_x|abs) / 10 ) | int) %} ; wipe pattern
			{% if r % 2 == 0 %}
				{% set m = 1 %}
			{% else %}
				{% set m = -1 %}
			{% endif %}
			G0 X{range_x/10 * m} Y-{range_y} F5000
			G0 X{range_x/10 * m} Y{range_y} F5000
		{% endfor %}
	{% endfor %}

	G90
	G0 Z10

[gcode_macro PARK_FRONT]
gcode:
  _CG28
  G91
  G0 Z10 F1800
  G90
  G0 X150 Y5 Z100 F12000

[gcode_macro PARK]
gcode:
    {% set noz = params.NO_Z|default(0)|int %}

    _CG28
#    {% if printer.toolhead.position.x != 290 or printer.toolhead.position.y != 300 %}
      G91
      G1 Z10 F2400       ; hop for safety
#    {% endif %}
    G90
    G1 X150 Y150 F12000
    {% if noz <= 0 %}
    	G1 Z10 F2400 
    {% endif %}

[gcode_macro G28]
rename_existing: G9928
gcode:
    _status_homing
    G9928 { rawparams }
    _status_ready 

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_1
gcode:
  {% if printer["gcode_macro _status_leveling"] != null %}
    _status_leveling
  {% endif %}
    QUAD_GANTRY_LEVEL_1 { rawparams }
  {% if printer["gcode_macro _status_ready"] != null %}
    _status_ready
  {% endif %}

[delayed_gcode _STOP_FILTER_DELAYED]
gcode:
    SET_FAN_SPEED FAN=filter SPEED=0
    _status_ready


# Blocking temperate to temperature_wait - Doesn't wait as long for stabilization
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}
[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[gcode_macro FLASH_LIGHTS]
gcode:
        {% set prevl = printer["output_pin daylight_left"].value %}
        {% set prevr = printer["output_pin daylight_right"].value %}
        SET_PIN PIN=daylight_left VALUE=1
        SET_PIN PIN=daylight_right VALUE=1
        G4 P150
        SET_PIN PIN=daylight_left VALUE={prevl}
        SET_PIN PIN=daylight_right VALUE={prevr}
        G4 P100
        SET_PIN PIN=daylight_left VALUE=1
        SET_PIN PIN=daylight_right VALUE=1
        G4 P150
        SET_PIN PIN=daylight_left VALUE={prevl}
        SET_PIN PIN=daylight_right VALUE={prevr}
        G4 P100
        SET_PIN PIN=daylight_left VALUE=1
        SET_PIN PIN=daylight_right VALUE=1
        G4 P150
        SET_PIN PIN=daylight_left VALUE={prevl}
        SET_PIN PIN=daylight_right VALUE={prevr}


[gcode_macro M106]
rename_existing: M10699
gcode:
	{% if (params.P|int if params.P is defined else 0) != 3 %}
		# {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
    	{% set speed = (params.S|int if params.S is defined else 255) %}
	    #SET_FAN_SPEED FAN=fan SPEED={speed}
		M10699 S{speed}
	{% endif %}

[gcode_macro M107]
rename_existing: M10799
gcode:
	{% if (params.P|int if params.P is defined else 0) != 3 %}
		M10799
	{% endif %}

[gcode_macro cooldown]
gcode:
	M104 S0 ; extruder off
	M140 S0 ; bed off


[gcode_macro prime]
gcode:
	# Prime the nozzle
    G90
	G0 X10 Y10 Z10
    #G1 X10 Y0.2 E5 F1000
    #G1 X120 E20 F1000
    G92 E0
    M83
    G0 E3 F500
    G0 X15 E5 Z0.2 F500
    G0 X25 E3 F500
    G0 X35 E3 F650
    G0 X40 E3 F800
    G0 X45 Z0.05 F8000
    G0 X50 Z0.2 F8000
    G92 E0
