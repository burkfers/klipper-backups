[include start_end.cfg]

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro _CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}


[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=load_state
    _status_busy
    G91
    G92 E0
    G1 E10 F150                    ; slow roll 10mm
    G1 E58 F1500                   ; fast approach meltzone
    G1 E15 F150                    ; prime nozzle with filament
    _status_ready
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    _status_busy
    G91
    G92 E0
    G1 E10 F300                    ; extrude a little to soften tip
    G1 E-10 F3000                  ; jerk the filament out of the melt zone
    G1 E-50 F1800                  ; retract the rest of the way
    G1 E-10 F900                   ; retract the rest of the way
    _status_ready
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
	_status_busy

#       SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
#       SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        _status_printing
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro PARK]
gcode:
    G90
    G1 X135 Y300 F12000 ; go to poop bucket

[gcode_macro CLEAN_NOZZLE]
description: Wipes nozzle and purges if hot
gcode:
    {% set prg = params.PURGE|default(0)|int %}
    _CG28

    _status_cleaning

    G91
    G1 Z10 F1800        ; hop 1cm
    G90
    G1 X135 Y300 F12000 ; go to poop bucket
    G1 Z10 F1800        ; position 1cm in air
   
    {% if prg > 0 %}
      M83
      G1 E30 F600   ; poop
      #G1 E-10 F1800 ; retract
      G10
    {% endif %}

    G90
    G1 X135 Y300 F8000  ; go to wipe start
    G1   Z4      F1800  ; lower to wipe
    G91
    G1 X-55 F8000       ; wipe l
    G1  X55 F8000       ; wipe r
    G1 X-55 F8000       ; wipe l
    G1  X55 F8000       ; wipe r
    G90

    PARK

[gcode_macro PARK]
gcode:
    G91
    G1 Z10 F1800       ; hop for safety
    G90
    G1 X135 Y300 F12000 ; go to poop bucket
    G1 Z20 F1800 

[gcode_macro G28]
rename_existing: G9928
gcode:
    _status_homing
    G9928 { rawparams }
    _status_ready 

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_1
gcode:
  {% if printer["gcode_macro _status_leveling"] != null %}
    _status_leveling
  {% endif %}
    QUAD_GANTRY_LEVEL_1 { rawparams }
  {% if printer["gcode_macro _status_ready"] != null %}
    _status_ready
  {% endif %}

[delayed_gcode _STOP_FILTER_DELAYED]
gcode:
    SET_FAN_SPEED FAN=nevermore SPEED=0

[gcode_macro HEAT_SOAK]
variable_check_interval: 10
variable_stage: None

variable_target_chamber_temp1: 35
variable_target_chamber_temp2: 35
variable_total_time_elapsed: 0

gcode:
  _status_heating

  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'heating'"
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE=0

  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ target_temp }
  SET_FAN_SPEED FAN=nevermore SPEED=0.5
  
  #G28
  #PARK
  #M84 ; turn off steppers

  UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
gcode:
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
  UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
gcode:
  {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

  {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

  {% set stage = heat_soak.stage %}
  {% if stage == "heating" and printer.chamber.temperature >= heat_soak.target_chamber_temp1 %}
    {% set stage = "soaking" %}
    _CQGL
    _status_heating
  {% endif %}

  
  {% if stage == "soaking" and printer.chamber.temperature >= heat_soak.target_chamber_temp2 %}
    _status_ready
    {% set stage = "done" %}
  {% endif %}

  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

  {% if stage in ("done", "cancel") %}
    {% if stage == "cancel" %}
      {% set stage = "done" %}
      TURN_OFF_HEATERS
      SET_FAN_SPEED FAN=nevermore SPEED=0.5
 
      M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
    {% else %}
      M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
    {% endif %}
    ## reset all state vars, except stage, which may be queried via the api
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
 
  {% else %}
    {% if total_time_elapsed % 90 == 0 %}
    ## output status periodically
      {% if stage == "heating" %}
        M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
      {% elif stage == "soaking" %}
        M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
      {% endif %}
   {% endif %}
      ## trigger ourselves again
      UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

      ## dwell for 1ms to prevent from going idle
      G4 P1 
    {% endif %}
